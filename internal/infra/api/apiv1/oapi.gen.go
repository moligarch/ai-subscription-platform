// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apiv1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ActivationCodeGenerateRequest defines model for ActivationCodeGenerateRequest.
type ActivationCodeGenerateRequest struct {
	Count         int     `json:"count"`
	ExpiresInDays *int    `json:"expires_in_days,omitempty"`
	Notes         *string `json:"notes,omitempty"`

	// PlanId ULID or UUID of the plan
	PlanId string `json:"plan_id"`
}

// ActivationCodeGenerateResponse defines model for ActivationCodeGenerateResponse.
type ActivationCodeGenerateResponse struct {
	// BatchId ULID of the generated batch
	BatchId string `json:"batch_id"`
	Codes   []struct {
		Code      string     `json:"code"`
		ExpiresAt *time.Time `json:"expires_at,omitempty"`
	} `json:"codes"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Model defines model for Model.
type Model struct {
	Currency string `json:"currency"`

	// InputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	InputPriceMicros PriceMicros `json:"input_price_micros"`
	Name             ModelName   `json:"name"`

	// OutputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	OutputPriceMicros PriceMicros `json:"output_price_micros"`
	UpdatedAt         time.Time   `json:"updated_at"`
}

// ModelCreate defines model for ModelCreate.
type ModelCreate struct {
	Currency *string `json:"currency,omitempty"`

	// InputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	InputPriceMicros PriceMicros `json:"input_price_micros"`
	Name             ModelName   `json:"name"`

	// OutputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	OutputPriceMicros PriceMicros `json:"output_price_micros"`
}

// ModelName defines model for ModelName.
type ModelName = string

// ModelUpdate defines model for ModelUpdate.
type ModelUpdate struct {
	Currency *string `json:"currency,omitempty"`

	// InputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	InputPriceMicros *PriceMicros `json:"input_price_micros,omitempty"`

	// OutputPriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
	OutputPriceMicros *PriceMicros `json:"output_price_micros,omitempty"`
}

// PriceMicros Price stored in micros of IRR. One IRR equals 1000000 micros.
type PriceMicros = int64

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Conflict defines model for Conflict.
type Conflict = Error

// NotFound defines model for NotFound.
type NotFound = Error

// NotImplemented defines model for NotImplemented.
type NotImplemented = Error

// Unprocessable defines model for Unprocessable.
type Unprocessable struct {
	Fields []struct {
		Error string `json:"error"`
		Field string `json:"field"`
	} `json:"fields"`
	Message string `json:"message"`
}

// ListModelsParams defines parameters for ListModels.
type ListModelsParams struct {
	// Q Optional case-insensitive substring filter for model name
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// GenerateActivationCodesJSONRequestBody defines body for GenerateActivationCodes for application/json ContentType.
type GenerateActivationCodesJSONRequestBody = ActivationCodeGenerateRequest

// CreateModelJSONRequestBody defines body for CreateModel for application/json ContentType.
type CreateModelJSONRequestBody = ModelCreate

// UpdateModelJSONRequestBody defines body for UpdateModel for application/json ContentType.
type UpdateModelJSONRequestBody = ModelUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate activation codes for a plan
	// (POST /api/v1/activation-codes/generate)
	GenerateActivationCodes(w http.ResponseWriter, r *http.Request)
	// List model pricing
	// (GET /api/v1/models)
	ListModels(w http.ResponseWriter, r *http.Request, params ListModelsParams)
	// Create model pricing
	// (POST /api/v1/models)
	CreateModel(w http.ResponseWriter, r *http.Request)
	// Delete model pricing
	// (DELETE /api/v1/models/{name})
	DeleteModel(w http.ResponseWriter, r *http.Request, name ModelName)
	// Get model pricing by name
	// (GET /api/v1/models/{name})
	GetModel(w http.ResponseWriter, r *http.Request, name ModelName)
	// Update model pricing
	// (PUT /api/v1/models/{name})
	UpdateModel(w http.ResponseWriter, r *http.Request, name ModelName)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Generate activation codes for a plan
// (POST /api/v1/activation-codes/generate)
func (_ Unimplemented) GenerateActivationCodes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List model pricing
// (GET /api/v1/models)
func (_ Unimplemented) ListModels(w http.ResponseWriter, r *http.Request, params ListModelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create model pricing
// (POST /api/v1/models)
func (_ Unimplemented) CreateModel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete model pricing
// (DELETE /api/v1/models/{name})
func (_ Unimplemented) DeleteModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get model pricing by name
// (GET /api/v1/models/{name})
func (_ Unimplemented) GetModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update model pricing
// (PUT /api/v1/models/{name})
func (_ Unimplemented) UpdateModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GenerateActivationCodes operation middleware
func (siw *ServerInterfaceWrapper) GenerateActivationCodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateActivationCodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListModelsParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateModel operation middleware
func (siw *ServerInterfaceWrapper) CreateModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateModel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name ModelName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModel(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModel operation middleware
func (siw *ServerInterfaceWrapper) GetModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name ModelName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModel(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name ModelName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateModel(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/activation-codes/generate", wrapper.GenerateActivationCodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/models", wrapper.ListModels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/models", wrapper.CreateModel)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/models/{name}", wrapper.DeleteModel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/models/{name}", wrapper.GetModel)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/models/{name}", wrapper.UpdateModel)
	})

	return r
}

type BadRequestJSONResponse Error

type ConflictJSONResponse Error

type NotFoundJSONResponse Error

type NotImplementedJSONResponse Error

type UnprocessableJSONResponse struct {
	Fields []struct {
		Error string `json:"error"`
		Field string `json:"field"`
	} `json:"fields"`
	Message string `json:"message"`
}

type GenerateActivationCodesRequestObject struct {
	Body *GenerateActivationCodesJSONRequestBody
}

type GenerateActivationCodesResponseObject interface {
	VisitGenerateActivationCodesResponse(w http.ResponseWriter) error
}

type GenerateActivationCodes201JSONResponse ActivationCodeGenerateResponse

func (response GenerateActivationCodes201JSONResponse) VisitGenerateActivationCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GenerateActivationCodes400JSONResponse struct{ BadRequestJSONResponse }

func (response GenerateActivationCodes400JSONResponse) VisitGenerateActivationCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateActivationCodes404JSONResponse struct{ NotFoundJSONResponse }

func (response GenerateActivationCodes404JSONResponse) VisitGenerateActivationCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GenerateActivationCodes422JSONResponse struct{ UnprocessableJSONResponse }

func (response GenerateActivationCodes422JSONResponse) VisitGenerateActivationCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GenerateActivationCodes501JSONResponse struct{ NotImplementedJSONResponse }

func (response GenerateActivationCodes501JSONResponse) VisitGenerateActivationCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type ListModelsRequestObject struct {
	Params ListModelsParams
}

type ListModelsResponseObject interface {
	VisitListModelsResponse(w http.ResponseWriter) error
}

type ListModels200JSONResponse struct {
	Items *[]Model `json:"items,omitempty"`
}

func (response ListModels200JSONResponse) VisitListModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListModels400JSONResponse struct{ BadRequestJSONResponse }

func (response ListModels400JSONResponse) VisitListModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListModels501JSONResponse struct{ NotImplementedJSONResponse }

func (response ListModels501JSONResponse) VisitListModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type CreateModelRequestObject struct {
	Body *CreateModelJSONRequestBody
}

type CreateModelResponseObject interface {
	VisitCreateModelResponse(w http.ResponseWriter) error
}

type CreateModel201JSONResponse Model

func (response CreateModel201JSONResponse) VisitCreateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateModel400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateModel400JSONResponse) VisitCreateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateModel409JSONResponse struct{ ConflictJSONResponse }

func (response CreateModel409JSONResponse) VisitCreateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateModel422JSONResponse struct{ UnprocessableJSONResponse }

func (response CreateModel422JSONResponse) VisitCreateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateModel501JSONResponse struct{ NotImplementedJSONResponse }

func (response CreateModel501JSONResponse) VisitCreateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModelRequestObject struct {
	Name ModelName `json:"name"`
}

type DeleteModelResponseObject interface {
	VisitDeleteModelResponse(w http.ResponseWriter) error
}

type DeleteModel204Response struct {
}

func (response DeleteModel204Response) VisitDeleteModelResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteModel400JSONResponse struct{ BadRequestJSONResponse }

func (response DeleteModel400JSONResponse) VisitDeleteModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModel404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteModel404JSONResponse) VisitDeleteModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModel409JSONResponse struct{ ConflictJSONResponse }

func (response DeleteModel409JSONResponse) VisitDeleteModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModel501JSONResponse struct{ NotImplementedJSONResponse }

func (response DeleteModel501JSONResponse) VisitDeleteModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type GetModelRequestObject struct {
	Name ModelName `json:"name"`
}

type GetModelResponseObject interface {
	VisitGetModelResponse(w http.ResponseWriter) error
}

type GetModel200JSONResponse Model

func (response GetModel200JSONResponse) VisitGetModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetModel400JSONResponse struct{ BadRequestJSONResponse }

func (response GetModel400JSONResponse) VisitGetModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetModel404JSONResponse struct{ NotFoundJSONResponse }

func (response GetModel404JSONResponse) VisitGetModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetModel501JSONResponse struct{ NotImplementedJSONResponse }

func (response GetModel501JSONResponse) VisitGetModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModelRequestObject struct {
	Name ModelName `json:"name"`
	Body *UpdateModelJSONRequestBody
}

type UpdateModelResponseObject interface {
	VisitUpdateModelResponse(w http.ResponseWriter) error
}

type UpdateModel200JSONResponse Model

func (response UpdateModel200JSONResponse) VisitUpdateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModel400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateModel400JSONResponse) VisitUpdateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModel404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateModel404JSONResponse) VisitUpdateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModel422JSONResponse struct{ UnprocessableJSONResponse }

func (response UpdateModel422JSONResponse) VisitUpdateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModel501JSONResponse struct{ NotImplementedJSONResponse }

func (response UpdateModel501JSONResponse) VisitUpdateModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Generate activation codes for a plan
	// (POST /api/v1/activation-codes/generate)
	GenerateActivationCodes(ctx context.Context, request GenerateActivationCodesRequestObject) (GenerateActivationCodesResponseObject, error)
	// List model pricing
	// (GET /api/v1/models)
	ListModels(ctx context.Context, request ListModelsRequestObject) (ListModelsResponseObject, error)
	// Create model pricing
	// (POST /api/v1/models)
	CreateModel(ctx context.Context, request CreateModelRequestObject) (CreateModelResponseObject, error)
	// Delete model pricing
	// (DELETE /api/v1/models/{name})
	DeleteModel(ctx context.Context, request DeleteModelRequestObject) (DeleteModelResponseObject, error)
	// Get model pricing by name
	// (GET /api/v1/models/{name})
	GetModel(ctx context.Context, request GetModelRequestObject) (GetModelResponseObject, error)
	// Update model pricing
	// (PUT /api/v1/models/{name})
	UpdateModel(ctx context.Context, request UpdateModelRequestObject) (UpdateModelResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GenerateActivationCodes operation middleware
func (sh *strictHandler) GenerateActivationCodes(w http.ResponseWriter, r *http.Request) {
	var request GenerateActivationCodesRequestObject

	var body GenerateActivationCodesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateActivationCodes(ctx, request.(GenerateActivationCodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateActivationCodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateActivationCodesResponseObject); ok {
		if err := validResponse.VisitGenerateActivationCodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListModels operation middleware
func (sh *strictHandler) ListModels(w http.ResponseWriter, r *http.Request, params ListModelsParams) {
	var request ListModelsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListModels(ctx, request.(ListModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListModelsResponseObject); ok {
		if err := validResponse.VisitListModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateModel operation middleware
func (sh *strictHandler) CreateModel(w http.ResponseWriter, r *http.Request) {
	var request CreateModelRequestObject

	var body CreateModelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateModel(ctx, request.(CreateModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateModelResponseObject); ok {
		if err := validResponse.VisitCreateModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteModel operation middleware
func (sh *strictHandler) DeleteModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	var request DeleteModelRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteModel(ctx, request.(DeleteModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModelResponseObject); ok {
		if err := validResponse.VisitDeleteModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetModel operation middleware
func (sh *strictHandler) GetModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	var request GetModelRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModel(ctx, request.(GetModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelResponseObject); ok {
		if err := validResponse.VisitGetModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateModel operation middleware
func (sh *strictHandler) UpdateModel(w http.ResponseWriter, r *http.Request, name ModelName) {
	var request UpdateModelRequestObject

	request.Name = name

	var body UpdateModelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateModel(ctx, request.(UpdateModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateModelResponseObject); ok {
		if err := validResponse.VisitUpdateModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
