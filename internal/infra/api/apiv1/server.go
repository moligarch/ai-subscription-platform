package apiv1

import (
	"context"
	"telegram-ai-subscription/internal/usecase"

	"github.com/go-chi/chi/v5"
)

// Server holds dependencies for v1 API handlers.
// NOTE: Concrete implementations will be injected in later steps.
type Server struct {
	PricingUC usecase.PricingUseCase
	PlanUC    usecase.PlanUseCase
}

// NewServer constructs the API v1 server with its dependencies.
// In later steps, pass real implementations for PricingUC and PlanUC.
func NewServer(pricingUC usecase.PricingUseCase, planUC usecase.PlanUseCase) *Server {
	return &Server{
		PricingUC: pricingUC,
		PlanUC:    planUC,
	}
}

// Ensure our Server implements the generated strict interface.
var _ StrictServerInterface = (*Server)(nil)

// -----------------------------------------------------------------------------
// Router mount helper
// -----------------------------------------------------------------------------

// RegisterAPIV1 mounts the generated strict handler on the provided chi router.
// Call this from your main router composition:
//
//	import apiv1 "internal/infra/api/apiv1"
//	srv := apiv1.NewServer(/* deps in Step 3 */)
//	apiv1.RegisterAPIV1(r, srv)
func RegisterAPIV1(r chi.Router, srv *Server) {
	// No custom middlewares for now; you can add them later.
	h := NewStrictHandler(srv, nil) // generated by oapi-codegen
	HandlerFromMux(h, r)            // generated by oapi-codegen
}

// small helper to build the 501 payload once
func notImpl() NotImplementedJSONResponse {
	// NotImplementedJSONResponse is a named type with underlying struct of Error.
	// We can use field names from the underlying struct here.
	return NotImplementedJSONResponse{Message: "not implemented"}
}

// -----------------------------------------------------------------------------
// StrictServerInterface stubs (return 501 Not Implemented)
// These method names/signatures are derived from operationIds in openapi.yaml.
// -----------------------------------------------------------------------------

// ListModels: GET /api/v1/models
func (s *Server) ListModels(ctx context.Context, req ListModelsRequestObject) (ListModelsResponseObject, error) {
	return ListModels501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}

// CreateModel: POST /api/v1/models
func (s *Server) CreateModel(ctx context.Context, req CreateModelRequestObject) (CreateModelResponseObject, error) {
	return CreateModel501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}

// GetModel: GET /api/v1/models/{name}
func (s *Server) GetModel(ctx context.Context, req GetModelRequestObject) (GetModelResponseObject, error) {
	return GetModel501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}

// UpdateModel: PUT /api/v1/models/{name}
func (s *Server) UpdateModel(ctx context.Context, req UpdateModelRequestObject) (UpdateModelResponseObject, error) {
	return UpdateModel501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}

// DeleteModel: DELETE /api/v1/models/{name}
func (s *Server) DeleteModel(ctx context.Context, req DeleteModelRequestObject) (DeleteModelResponseObject, error) {
	return DeleteModel501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}

// GenerateActivationCodes: POST /api/v1/activation-codes/generate
func (s *Server) GenerateActivationCodes(ctx context.Context, req GenerateActivationCodesRequestObject) (GenerateActivationCodesResponseObject, error) {
	return GenerateActivationCodes501JSONResponse{
		NotImplementedJSONResponse: notImpl(),
	}, nil
}
