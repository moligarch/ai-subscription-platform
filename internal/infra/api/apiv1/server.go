package apiv1

import (
	"context"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// Server holds dependencies for v1 API handlers.
// Wire your usecases/repos here in Step 3.
type Server struct {
	// PricingUsecase    interface{ /* define in Step 3 */ }
	// PlanUsecase       interface{ /* define in Step 3 */ }
}

// NewServer constructs the API v1 server with its dependencies.
// Extend the arguments once you wire real usecases in Step 3.
func NewServer() *Server {
	return &Server{}
}

// Ensure our Server implements the generated strict interface.
var _ StrictServerInterface = (*Server)(nil)

// NotImplementedError is returned by all stubs in Step 2.
// The generated router will convert an error implementing
// StatusCode() into an HTTP response with that code.
type NotImplementedError struct{}

func (e NotImplementedError) Error() string   { return "not implemented" }
func (e NotImplementedError) StatusCode() int { return http.StatusNotImplemented }

// -----------------------------------------------------------------------------
// Router mount helper
// -----------------------------------------------------------------------------

// RegisterAPIV1 mounts the generated strict handler on the provided chi router.
// Call this from your main router composition:
//
//	import apiv1 "internal/infra/api/apiv1"
//	srv := apiv1.NewServer(/* deps in Step 3 */)
//	apiv1.RegisterAPIV1(r, srv)
func RegisterAPIV1(r chi.Router, srv *Server) {
	// No custom middlewares for now; you can add them later.
	h := NewStrictHandler(srv, nil) // generated by oapi-codegen
	HandlerFromMux(h, r)            // generated by oapi-codegen
}

// -----------------------------------------------------------------------------
// StrictServerInterface stubs (return 501 Not Implemented)
// These method names/signatures are derived from operationIds in openapi.yaml.
// -----------------------------------------------------------------------------

// ListModels: GET /api/v1/models
func (s *Server) ListModels(ctx context.Context, req ListModelsRequestObject) (ListModelsResponseObject, error) {
	return nil, NotImplementedError{}
}

// CreateModel: POST /api/v1/models
func (s *Server) CreateModel(ctx context.Context, req CreateModelRequestObject) (CreateModelResponseObject, error) {
	return nil, NotImplementedError{}
}

// GetModel: GET /api/v1/models/{name}
func (s *Server) GetModel(ctx context.Context, req GetModelRequestObject) (GetModelResponseObject, error) {
	return nil, NotImplementedError{}
}

// UpdateModel: PUT /api/v1/models/{name}
func (s *Server) UpdateModel(ctx context.Context, req UpdateModelRequestObject) (UpdateModelResponseObject, error) {
	return nil, NotImplementedError{}
}

// DeleteModel: DELETE /api/v1/models/{name}
func (s *Server) DeleteModel(ctx context.Context, req DeleteModelRequestObject) (DeleteModelResponseObject, error) {
	return nil, NotImplementedError{}
}

// GenerateActivationCodes: POST /api/v1/activation-codes/generate
func (s *Server) GenerateActivationCodes(ctx context.Context, req GenerateActivationCodesRequestObject) (GenerateActivationCodesResponseObject, error) {
	return nil, NotImplementedError{}
}
