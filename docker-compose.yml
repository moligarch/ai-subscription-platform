networks:
  app_net:
    driver: bridge

services:
  caddy:
    image: caddy:2
    container_name: caddy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./deploy/ui:/srv/ui
      - caddy_data:/data
    networks:
      - app_net
    depends_on:
      # - app
      - grafana

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tehran
      PGTZ: Asia/Tehran
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./deploy/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 5s
      retries: 10
    networks:
      - app_net

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - app_net

  prometheus:
    image: prom/prometheus:v2.53.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      - app_net

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/monitor/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      # optional if behind a proxy terminating TLS:
      # - GF_SERVER_DOMAIN=admin.sibgpt.app
      # - GF_SERVER_PROTOCOL=https
    networks:
      - app_net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: telegram-ai:prod
    container_name: telegram-ai
    environment:
      TZ: Asia/Tehran
    volumes:
      - ./config.yaml:/etc/app/config.yaml
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2g
    networks:
      - app_net

volumes:
  pgdata:
  caddy_data:
  grafana_data: