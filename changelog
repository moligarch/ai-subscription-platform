Release Version 0.0.3.0

### Architecture & Refactoring
* Implemented the Outbox Pattern for asynchronous AI chat processing, making the bot instantly responsive and protecting the system from slow API calls.
* Wrapped all critical business logic (payments, subscriptions) in atomic database transactions to ensure data consistency.
* Refactored the Telegram bot command handler to a scalable router pattern.
* Implemented a Redis caching layer for users, plans, and pricing to significantly improve performance and reduce database load.

### Testing
* Implemented a comprehensive suite of unit tests for all use cases and business logic.
* Implemented a full suite of integration tests for all database repositories.
* Created a self-contained, Docker-based environment for running integration tests reliably and without external dependencies.

### Features & Observability
* Added a suite of admin-only bot commands (`/create_plan`, `/update_pricing`, etc.) for live application management.
* Integrated Grafana and Loki into the Docker Compose stack for monitoring.
* Added extensive Prometheus metrics for business logic (revenue, users), infrastructure (DB pool, cache hits), and security events.

### Security & Hardening
* Moved all secrets from config files to environment variables (`.env`) for secure deployments.
* Standardized error handling across the application to use typed domain errors, improving robustness.